package aes

import (
	"slices"
	"testing"
)

func TestAes128ECBEncrypt(t *testing.T) {
	AESInit()
	key := [16]uint8{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}
	in := [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a}
	out := [16]uint8{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97}
	ctx := NewAesContext(AES128, key[:])
	actual_out := ctx.EncryptECBBlock(in)

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}

func TestAes128EBCDecrypt(t *testing.T) {
	AESInit()
	key := [16]uint8{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}
	in := [16]uint8{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97}
	out := [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a}
	ctx := NewAesContext(AES128, key[:])
	actual_out := ctx.DeryptECBBlock(in)

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}
