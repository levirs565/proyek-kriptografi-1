package aes

import (
	"slices"
	"testing"
)

var testEncryptNameMap = []string{"Encrypt", "Decrypt"}

func TestAesBlock(t *testing.T) {
	AESInit()
	testCases := []struct {
		name          string
		variant       AESVariant
		key           []uint8
		plain, cipher [16]uint8
	}{
		{
			name:    "AES-128",
			variant: AES128,
			key:     []uint8{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c},
			plain:   [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
			cipher:  [16]uint8{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97},
		}, {
			name:    "AES-192",
			variant: AES192,
			key: []uint8{0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
				0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b},
			plain:  [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
			cipher: [16]uint8{0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc},
		}, {
			name:    "AES-256",
			variant: AES256,
			key: []uint8{0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
				0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4},
			plain:  [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
			cipher: [16]uint8{0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8},
		},
	}

	for _, v := range testCases {
		for i := range 2 {
			encrypt := i == 0
			t.Run(v.name+" "+testEncryptNameMap[i], func(t *testing.T) {
				key := v.key
				in := v.plain
				out := v.cipher
				if !encrypt {
					in, out = out, in
				}
				ctx, err := NewAesContext(v.variant, key[:])
				if err != nil {
					t.Error(err)
					return
				}
				var actual_out [16]uint8
				if encrypt {
					actual_out = ctx.EncryptBlock(in)
				} else {
					actual_out = ctx.DeryptBlock(in)

				}

				t.Logf("%x\n", ctx.roundKey)
				t.Logf("%x\n", out)
				t.Logf("%x\n", actual_out)

				if !slices.Equal(out[:], actual_out[:]) {
					t.Errorf("Not match")
				}
			})
		}
	}
}

func TestAes256ECB(t *testing.T) {
	AESInit()
	for i := range 2 {
		encrypt := i == 0
		t.Run(testEncryptNameMap[i], func(t *testing.T) {
			key := [32]uint8{0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
				0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4}
			in := []uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
				0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8}
			out := []uint8{0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8,
				0xe3, 0x19, 0xf2, 0x55, 0xb4, 0xf5, 0xae, 0xb0, 0x4e, 0xa0, 0x14, 0xd5, 0xba, 0xe9, 0x00, 0x50}
			if !encrypt {
				in, out = out, in
			}
			ctx, err := NewAesContext(AES256, key[:])
			if err != nil {
				t.Error(err)
				return
			}

			var actual_out []uint8
			if encrypt {
				actual_out, err = ctx.EncryptECB(in[:], PKCS7Padding)
			} else {
				actual_out, err = ctx.DecryptECB(in[:], PKCS7Padding)
			}

			if err != nil {
				t.Error(err)
				return
			}

			t.Logf("%x\n", ctx.roundKey)
			t.Logf("%x\n", out)
			t.Logf("%x\n", actual_out)

			if !slices.Equal(out[:], actual_out[:]) {
				t.Errorf("Not match")
			}
		})
	}
}

func TestAesCBC(t *testing.T) {
	AESInit()
	iv := [16]uint8{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}
	plain := []uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
		0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
		0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
		0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10}
	testCases := []struct {
		name        string
		variant     AESVariant
		key, cipher []uint8
	}{
		{
			name:    "AES-128",
			variant: AES128,
			key:     []uint8{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c},
			cipher: []uint8{0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
				0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
				0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
				0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7},
		}, {
			name:    "AES-192",
			variant: AES192,
			key:     []uint8{0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b},
			cipher: []uint8{0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
				0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
				0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
				0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd},
		}, {
			name:    "AES-256",
			variant: AES256,
			key: []uint8{0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
				0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4},
			cipher: []uint8{0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
				0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
				0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
				0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b},
		},
	}

	for _, v := range testCases {
		for i := range 2 {
			encrypt := i == 0
			t.Run(v.name+" "+testEncryptNameMap[i], func(t *testing.T) {
				key := v.key
				in := plain
				out := v.cipher
				if !encrypt {
					in, out = out, in
				}
				ctx, err := NewAesContext(v.variant, key[:])
				if err != nil {
					t.Error(err)
					return
				}
				ctx.SetIv(iv)
				var actual_out []uint8
				if encrypt {
					actual_out, err = ctx.EncryptCBC(in, NoPadding)
				} else {
					actual_out, err = ctx.DecryptCBC(in, NoPadding)
				}

				if err != nil {
					t.Error(err)
					return
				}

				t.Logf("%x\n", ctx.roundKey)
				t.Logf("%x\n", out)
				t.Logf("%x\n", actual_out)

				if !slices.Equal(out[:], actual_out[:]) {
					t.Errorf("Not match")
				}
			})
		}
	}
}
