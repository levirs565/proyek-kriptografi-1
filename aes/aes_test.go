package aes

import (
	"slices"
	"testing"
)

func TestAes128ECBEncrypt(t *testing.T) {
	AESInit()
	key := [16]uint8{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}
	in := [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a}
	out := [16]uint8{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97}
	ctx, err := NewAesContext(AES128, key[:])
	if err != nil {
		t.Error(err)
		return
	}

	actual_out := ctx.EncryptECBBlock(in)

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}

func TestAes128EBCDecrypt(t *testing.T) {
	AESInit()
	key := [16]uint8{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}
	in := [16]uint8{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97}
	out := [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a}
	ctx, err := NewAesContext(AES128, key[:])
	if err != nil {
		t.Error(err)
		return
	}

	actual_out := ctx.DeryptECBBlock(in)

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}

func TestAes192ECBEncrypt(t *testing.T) {
	AESInit()
	key := [24]uint8{0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
		0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b}
	in := [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a}
	out := [16]uint8{0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc}
	ctx, err := NewAesContext(AES192, key[:])
	if err != nil {
		t.Error(err)
		return
	}

	actual_out := ctx.EncryptECBBlock(in)

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}

func TestAes192EBCDecrypt(t *testing.T) {
	AESInit()
	key := [24]uint8{0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
		0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b}
	in := [16]uint8{0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc}
	out := [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a}
	ctx, err := NewAesContext(AES192, key[:])
	if err != nil {
		t.Error(err)
		return
	}

	actual_out := ctx.DeryptECBBlock(in)

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}

func TestAes256ECBEncrypt(t *testing.T) {
	AESInit()
	key := [32]uint8{0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
		0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4}
	in := [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a}
	out := [16]uint8{0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8}
	ctx, err := NewAesContext(AES256, key[:])
	if err != nil {
		t.Error(err)
		return
	}

	actual_out := ctx.EncryptECBBlock(in)

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}

func TestAes256EBCDecrypt(t *testing.T) {
	AESInit()
	key := [32]uint8{0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
		0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4}
	in := [16]uint8{0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8}
	out := [16]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a}
	ctx, err := NewAesContext(AES256, key[:])
	if err != nil {
		t.Error(err)
		return
	}

	actual_out := ctx.DeryptECBBlock(in)

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}

func TestAes256ECBEncryptBytes(t *testing.T) {
	AESInit()
	key := [32]uint8{0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
		0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4}
	in := [24]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
		0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8}
	out := [32]uint8{0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8,
		0xe3, 0x19, 0xf2, 0x55, 0xb4, 0xf5, 0xae, 0xb0, 0x4e, 0xa0, 0x14, 0xd5, 0xba, 0xe9, 0x00, 0x50}
	ctx, err := NewAesContext(AES256, key[:])
	if err != nil {
		t.Error(err)
		return
	}

	actual_out := ctx.EncryptECB(in[:])

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}

func TestAes256EBCDecryptBytes(t *testing.T) {
	AESInit()
	key := [32]uint8{0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
		0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4}
	in := [32]uint8{0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8,
		0xe3, 0x19, 0xf2, 0x55, 0xb4, 0xf5, 0xae, 0xb0, 0x4e, 0xa0, 0x14, 0xd5, 0xba, 0xe9, 0x00, 0x50}
	out := [24]uint8{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
		0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8}
	ctx, err := NewAesContext(AES256, key[:])
	if err != nil {
		t.Error(err)
		return
	}

	actual_out, err := ctx.DecryptECB(in[:])

	if err != nil {
		t.Error(err)
		return
	}

	t.Logf("%x\n", ctx.roundKey)
	t.Logf("%x\n", out)
	t.Logf("%x\n", actual_out)

	if !slices.Equal(out[:], actual_out[:]) {
		t.Errorf("Not match")
	}
}
