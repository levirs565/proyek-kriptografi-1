package aes

import (
	"slices"
	"testing"
)

func TestPpaddingPKCS71(t *testing.T) {
	unpadded := [11]uint8{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xa0}
	padded := [16]uint8{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xa0, 0x05, 0x05, 0x05, 0x05, 0x05}
	padded_actual := pkcs7Padd(unpadded[:])

	if !slices.Equal(padded[:], padded_actual) {
		t.Errorf("Result not match")
	}
}

func TestPpaddingPKCS72(t *testing.T) {
	unpadded := [16]uint8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10}
	padded := [32]uint8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10}
	padded_actual := pkcs7Padd(unpadded[:])

	if !slices.Equal(padded[:], padded_actual) {
		t.Logf("%x\n", padded_actual[:])
		t.Errorf("Result not match")
	}
}

func TestUnpaddingPKCS71(t *testing.T) {
	padded := [16]uint8{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xa0, 0x05, 0x05, 0x05, 0x05, 0x05}
	unpadded := [11]uint8{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xa0}
	unpadded_actual, res := pkcs7Unpadd(padded[:])

	if !res {
		t.Errorf("Unpadd fail")
		return
	}

	if !slices.Equal(unpadded[:], unpadded_actual) {
		t.Errorf("Result not match")
	}
}

func TestUnpaddingPKCS72(t *testing.T) {
	padded := [32]uint8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10}
	unpadded := [16]uint8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10}
	unpadded_actual, res := pkcs7Unpadd(padded[:])

	if !res {
		t.Errorf("Unpadd fail")
		return
	}

	if !slices.Equal(unpadded[:], unpadded_actual) {
		t.Errorf("Result not match")
	}
}
